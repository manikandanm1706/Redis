import { Reflector } from '@nestjs/core';

export class MetaUtility {
  private static reflector = new Reflector();

  static getMethodMetadata(controller: any, methodName: string, key: string): any {
    const metadata = this.reflector.get(key, controller[methodName]);
    console.log(`Metadata for method ${methodName}:`, metadata);
    return metadata;
  }
}

___
import {
  Table,
  Column,
  Model,
  DataType,
  AfterUpdate,
} from 'sequelize-typescript';
import { MetaUtility } from '../utils/meta-utility';
import { ProductController } from '../product.controller';

@Table({ tableName: 'products' })
export class Product extends Model<Product> {
  @Column({
    type: DataType.STRING,
    allowNull: false,
  })
  name: string;

  @Column({
    type: DataType.FLOAT,
    allowNull: false,
  })
  price: number;

  @AfterUpdate
  static async logUpdate(instance: Product) {
    console.log(`Product with ID ${instance.id} was updated`);

    // Fetch metadata for the 'findAll' method dynamically
    const metadata = MetaUtility.getMethodMetadata(ProductController.prototype, 'findAll', 'customMetaKey');
    console.log('Method Metadata from Utility Function:', metadata);

    if (metadata?.operation === 'fetch-all-products') {
      console.log('This update is related to the fetch-all-products operation');
    }
  }
}

____
