const { isBaseModel, model, as} = columnConfig;

// const fullyQualifiedColumn getQualifiedName(operator, columnConfig);

const whereClause getWhereObjectV2({ fieldName: ${as}.${columnConfig.column), operator, value, from,to});

if (isBaseModel) {

whereClauses.push (whereClause);

} else {

whereClauses.push (whereClause);

if (queryBuilder.query.include && queryBuilder.query.include.length) {

let includeItem queryBuilder.query.include.find((item) => item.model === model);

if (!includeItem) {

queryBuilder.query.include.push({ model, as });

} else {

// includeItem.where = { ...includeItem.where, ...whereClause);


}

} else {

include.push({ model, as });

}

// Combine all conditions using the provided logic operator

where = { [Op[logicOperator.toLowerCase()]]: whereClauses };

queryBuilder.query.where = where;

queryBuilder.query.include = include;

return queryBuilder;

};